Microsoft (R) Macro Assembler Version 14.29.30139.0	    07/24/22 23:14:19
"Project Four     (Proj4_maesz.asm			     Page 1 - 1


				TITLE Project Four     (Proj4_maesz.asm)

				; Author: Zachary Maes
				; Last Modified: July 24, 2022
				; OSU email address: maesz@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 4            Due Date: July 24, 2022
				; Description: 

				; This program is divided into multiple procedures and sub-procedures. First the user is greeted and instructions are printed for them to read.
				; The user will then enter a number in the range of [1...200] inclusive to which the program will validate that the value is within the range.
				; The program validation will continue to ask the user for a new value if they previously entered a value out of bounds.
				; After successful validation, the program will calculate that entered number of prime numbers in ascending order. 
				; It will print these numbers with at least 3 spaces inbetween each number and 10 results per line.
				; Upon successful printing of the prime numbers, the program will give a farewell message and end.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				; (insert macro definitions here)
				; (insert constant definitions here)

				;UPPER AND LOWER BOUNDS
 = 00000001			LOWER_BOUND = 1
 = 000000C8			UPPER_BOUND = 200

 00000000			.data
				; (insert variable definitions here)

				; INTRODUCTION DATA
 00000000 57 65 6C 63 6F	intro_1			 BYTE	"Welcome to Project Four Nested Loops & Procedures by Zachary Maes!",0
	   6D 65 20 74 6F
	   20 50 72 6F 6A
	   65 63 74 20 46
	   6F 75 72 20 4E
	   65 73 74 65 64
	   20 4C 6F 6F 70
	   73 20 26 20 50
	   72 6F 63 65 64
	   75 72 65 73 20
	   62 79 20 5A 61
	   63 68 61 72 79
	   20 4D 61 65 73
	   21 00
 00000043 44 69 72 65 63	direction_1		 BYTE	"Directions:",0
	   74 69 6F 6E 73
	   3A 00
 0000004F 54 68 69 73 20	direction_2		 BYTE	"This program calculates and displays all of the prime numbers up to and including the nth prime.",0
	   70 72 6F 67 72
	   61 6D 20 63 61
	   6C 63 75 6C 61
	   74 65 73 20 61
	   6E 64 20 64 69
	   73 70 6C 61 79
	   73 20 61 6C 6C
	   20 6F 66 20 74
	   68 65 20 70 72
	   69 6D 65 20 6E
	   75 6D 62 65 72
	   73 20 75 70 20
	   74 6F 20 61 6E
	   64 20 69 6E 63
	   6C 75 64 69 6E
	   67 20 74 68 65
	   20 6E 74 68 20
	   70 72 69 6D 65
	   2E 00
 000000B0 49 6E 20 61 20	direction_3		 BYTE	"In a moment, this program will have you enter the number (n) of prime numbers to be displayed.",0
	   6D 6F 6D 65 6E
	   74 2C 20 74 68
	   69 73 20 70 72
	   6F 67 72 61 6D
	   20 77 69 6C 6C
	   20 68 61 76 65
	   20 79 6F 75 20
	   65 6E 74 65 72
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 20 28 6E 29
	   20 6F 66 20 70
	   72 69 6D 65 20
	   6E 75 6D 62 65
	   72 73 20 74 6F
	   20 62 65 20 64
	   69 73 70 6C 61
	   79 65 64 2E 00
 0000010F 54 68 65 20 6E	direction_4		 BYTE	"The number you enter must be an integer in the range of [1 to 200] inclusive. ",0
	   75 6D 62 65 72
	   20 79 6F 75 20
	   65 6E 74 65 72
	   20 6D 75 73 74
	   20 62 65 20 61
	   6E 20 69 6E 74
	   65 67 65 72 20
	   69 6E 20 74 68
	   65 20 72 61 6E
	   67 65 20 6F 66
	   20 5B 31 20 74
	   6F 20 32 30 30
	   5D 20 69 6E 63
	   6C 75 73 69 76
	   65 2E 20 00
 0000015E 49 66 20 79 6F	direction_5		 BYTE	"If you enter a wrong number, the program will reprompt you to enter another number (hopefully correct this time around)",0
	   75 20 65 6E 74
	   65 72 20 61 20
	   77 72 6F 6E 67
	   20 6E 75 6D 62
	   65 72 2C 20 74
	   68 65 20 70 72
	   6F 67 72 61 6D
	   20 77 69 6C 6C
	   20 72 65 70 72
	   6F 6D 70 74 20
	   79 6F 75 20 74
	   6F 20 65 6E 74
	   65 72 20 61 6E
	   6F 74 68 65 72
	   20 6E 75 6D 62
	   65 72 20 28 68
	   6F 70 65 66 75
	   6C 6C 79 20 63
	   6F 72 72 65 63
	   74 20 74 68 69
	   73 20 74 69 6D
	   65 20 61 72 6F
	   75 6E 64 29 00
 000001D6 54 68 65 20 72	direction_6		 BYTE	"The results will be displayed 10 prime numbers per line, in ascending order, with at least 3 spaces between the numbers. ",0
	   65 73 75 6C 74
	   73 20 77 69 6C
	   6C 20 62 65 20
	   64 69 73 70 6C
	   61 79 65 64 20
	   31 30 20 70 72
	   69 6D 65 20 6E
	   75 6D 62 65 72
	   73 20 70 65 72
	   20 6C 69 6E 65
	   2C 20 69 6E 20
	   61 73 63 65 6E
	   64 69 6E 67 20
	   6F 72 64 65 72
	   2C 20 77 69 74
	   68 20 61 74 20
	   6C 65 61 73 74
	   20 33 20 73 70
	   61 63 65 73 20
	   62 65 74 77 65
	   65 6E 20 74 68
	   65 20 6E 75 6D
	   62 65 72 73 2E
	   20 00
 00000250 54 68 65 20 66	direction_7		 BYTE	"The final row may contain fewer than 10 values.",0
	   69 6E 61 6C 20
	   72 6F 77 20 6D
	   61 79 20 63 6F
	   6E 74 61 69 6E
	   20 66 65 77 65
	   72 20 74 68 61
	   6E 20 31 30 20
	   76 61 6C 75 65
	   73 2E 00

				; GET USER INPUT DATA
 00000280 45 6E 74 65 72	get_user_input_1 BYTE	"Enter the number of prime numbers would you like to print [1 to 200]: ",0
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 20 6F 66 20
	   70 72 69 6D 65
	   20 6E 75 6D 62
	   65 72 73 20 77
	   6F 75 6C 64 20
	   79 6F 75 20 6C
	   69 6B 65 20 74
	   6F 20 70 72 69
	   6E 74 20 5B 31
	   20 74 6F 20 32
	   30 30 5D 3A 20
	   00
 000002C7 00000000		user_input_check DWORD	?		; 0 =  not the correct value --- 1 = correct value
 000002CB 00000000		user_input		 DWORD	?		; Stores the user input


				; VALIDATE USER INPUT DATA
 000002CF 45 52 52 4F 52	error_1			 BYTE	"ERROR!",0
	   21 00
 000002D6 59 6F 75 20 65	error_2			 BYTE	"You entered an invalid number. Please Try Again...",0
	   6E 74 65 72 65
	   64 20 61 6E 20
	   69 6E 76 61 6C
	   69 64 20 6E 75
	   6D 62 65 72 2E
	   20 50 6C 65 61
	   73 65 20 54 72
	   79 20 41 67 61
	   69 6E 2E 2E 2E
	   00
 00000309 59 6F 75 72 20	is_valid_message BYTE	"Your Number is valid!",0
	   4E 75 6D 62 65
	   72 20 69 73 20
	   76 61 6C 69 64
	   21 00

				; Prime Loop DATA
 0000031F 00000000		prime_bool		 DWORD	?		; 0 =  not prime --- 1 = prime
 00000323 20 20 20 00		prime_spaces	 BYTE	"   ",0	; 3 spaces

				; FAREWELL DATA
 00000327 57 4F 57 2E 2E	farewell_prompt  BYTE	"WOW... Look at those prime numbers! Have a nice day!",0
	   2E 20 4C 6F 6F
	   6B 20 61 74 20
	   74 68 6F 73 65
	   20 70 72 69 6D
	   65 20 6E 75 6D
	   62 65 72 73 21
	   20 48 61 76 65
	   20 61 20 6E 69
	   63 65 20 64 61
	   79 21 00

 00000000			.code
 00000000			main PROC
					; (insert executable instructions here)

 00000000  E8 00000016			call   introduction
 00000005  E8 00000094		    call   getUserData		; calls sub-procedure validate
 0000000A  E8 00000105		    call   showPrimes		; calls sub-procedure isPrime
 0000000F  E8 00000173			call   farewell

					Invoke ExitProcess,0	; exit to operating system
 00000014  6A 00	   *	    push   +000000000h
 00000016  E8 00000000 E   *	    call   ExitProcess
 0000001B			main ENDP

				; (insert additional procedures here)

				; ---------------------------------------------------------------------------------
				; Name: introduction
				;
				; This procedure displays the various intro_prompt and  directions to the user.
				;
				; Preconditions: global variables intro_1 and direction_[1-7] must be initialized to BYTE strings.
				;
				; Postconditions: N/A
				;
				; Receives: Only used global variables described in Preconditions section.
				;
				; Returns: Only prints original global variables described above.
				; ---------------------------------------------------------------------------------

 0000001B			introduction PROC
 0000001B  BA 00000000 R		mov  EDX, OFFSET intro_1
 00000020  E8 00000000 E		call WriteString
 00000025  E8 00000000 E		call CrLf
 0000002A  E8 00000000 E		call CrLf

 0000002F  BA 00000043 R		mov  EDX, OFFSET direction_1
 00000034  E8 00000000 E		call WriteString
 00000039  E8 00000000 E		call CrLf

 0000003E  BA 0000004F R		mov  EDX, OFFSET direction_2
 00000043  E8 00000000 E		call WriteString
 00000048  E8 00000000 E		call CrLf
					
 0000004D  BA 000000B0 R		mov  EDX, OFFSET direction_3
 00000052  E8 00000000 E		call WriteString
 00000057  E8 00000000 E		call CrLf

 0000005C  BA 0000010F R		mov  EDX, OFFSET direction_4
 00000061  E8 00000000 E		call WriteString
 00000066  E8 00000000 E		call CrLf

 0000006B  BA 0000015E R		mov  EDX, OFFSET direction_5
 00000070  E8 00000000 E		call WriteString
 00000075  E8 00000000 E		call CrLf

 0000007A  BA 000001D6 R		mov  EDX, OFFSET direction_6
 0000007F  E8 00000000 E		call WriteString
 00000084  E8 00000000 E		call CrLf

 00000089  BA 00000250 R		mov  EDX, OFFSET direction_7
 0000008E  E8 00000000 E		call WriteString
 00000093  E8 00000000 E		call CrLf
 00000098  E8 00000000 E		call CrLf

 0000009D  C3				ret
 0000009E			introduction ENDP


				; ---------------------------------------------------------------------------------
				; Name: getUserData
				;
				; This procedure collects an inputted number from the user and then calls on the validate procedure 
				; to check if that number is within the range [1...200]. The procedure repeats the prompt if the 
				; number is not valid.
				;
				; Preconditions: 
				;	-Global prompt variables must be initialized to BYTE strings.
				;	-validate procedure must be defined and operational.
				;
				; Postconditions: N/A
				;
				; Receives: user_input_check DWORD from validate procedure.
				;
				; Returns: user_input DWORD saves the value from EAX at the end of the procedure.
				; ---------------------------------------------------------------------------------

 0000009E			getUserData PROC
 0000009E  C7 05 000002C7 R		mov user_input_check, 0					; (0=not valid, 1=valid) --- initialize to 0
	   00000000
					
 000000A8				_promptUser:						    ; Prompt the user for an integer
 000000A8  BA 00000280 R			mov  EDX, OFFSET get_user_input_1
 000000AD  E8 00000000 E			call WriteString
 000000B2  E8 00000000 E			call ReadInt						; EAX now has the user input

 000000B7  E8 0000000F			call validate							
					
 000000BC  83 3D 000002C7 R		cmp  user_input_check, 1				; check user_input_check and decided where to jump
	   01
 000000C3  75 E3			JNE	 _promptUser

 000000C5  A3 000002CB R		mov  user_input, EAX					; save eax in user_input

 000000CA  C3				ret
 000000CB			getUserData ENDP

				; ---------------------------------------------------------------------------------
				; Name: validate
				;
				; This procedure takes EAX value from getUserData and validates if that value is within the range of [1...200].
				; It returns the validation to getUserData.
				;
				; Preconditions: 
				;	-LOWER_BOUND constant must be set to 1
				;	-UPPER_BOUND constant must be set to 200.
				;	-user_input_check must be set to 0
				;	-all prompt global variables must be initialized in the data section.
				;
				; Postconditions: N/A
				;
				; Receives: EAX, and variables/constants described in the preconditions section.
				;
				; Returns: user_input_check DWORD to getUserData.
				; ---------------------------------------------------------------------------------

 000000CB			validate PROC
 000000CB  3D 000000C8			cmp  EAX, UPPER_BOUND
 000000D0  7F 02			JG   _notInRange
 000000D2  7E 1F			JLE  _lessThanOrEqualToUpper

 000000D4				_notInRange:							; Error Too High
 000000D4  BA 000002CF R			mov  EDX, OFFSET error_1			; Error Message 1
 000000D9  E8 00000000 E			call WriteString
 000000DE  E8 00000000 E			call CrLf
						
 000000E3  BA 000002D6 R			mov  EDX, OFFSET error_2			; Error Message 2
 000000E8  E8 00000000 E			call WriteString
 000000ED  E8 00000000 E			call CrLf
 000000F2  C3					ret

 000000F3				_lessThanOrEqualToUpper:
 000000F3  83 F8 01				cmp  EAX, LOWER_BOUND
 000000F6  7D 02				JGE _validNumber
 000000F8  7C DA				JL  _notInRange

 000000FA				_validNumber:							; display success message
 000000FA  BA 00000309 R			mov  EDX, OFFSET is_valid_message
 000000FF  E8 00000000 E			call WriteString
 00000104  E8 00000000 E			call CrLf
 00000109  C7 05 000002C7 R			mov user_input_check, 1				; 1 = valid number
	   00000001

 00000113  C3				ret
 00000114			validate ENDP

				; ---------------------------------------------------------------------------------
				; Name: showPrimes
				;
				; This procedure takes the validated user_input and creates a loop with that value set to ECX.
				; The loop uses isPrime procedure to check if the passed number is prime or not. It recieves a prime_bool value from isPrime
				; to determine this.
				;
				; Preconditions: 
				;	-isPrime procedure must be defined
				;	-prime_bool DWORD must be initialized in the data section.
				;	-user_input must be defined from the prior procedures.
				;
				; Postconditions: N/A
				;
				; Receives: user_input, and variables/constants described in the preconditions section.
				;
				; Returns: prints specified number of prime numbers to the console.
				; ---------------------------------------------------------------------------------

 00000114			showPrimes PROC
 00000114  8B 0D 000002CB R		mov ECX, user_input						; loop count set to user_input
 0000011A  B8 00000003			mov EAX, 3								; set the first prime candidate to 3

 0000011F				prime_candidate_loop:
 0000011F  E8 00000023				call isPrime
 00000124  83 3D 0000031F R			cmp prime_bool, 1					; 0 =  not prime --- 1 = prime
	   01
 0000012B  74 02				JE _printPrime
 0000012D  7C 11				JL _notPrime

 0000012F					_printPrime:
 0000012F  BA 00000323 R				mov  EDX, OFFSET prime_spaces
 00000134  E8 00000000 E				call WriteInt
 00000139  E8 00000000 E				call WriteString				; print the necessary space
							;
							;
							; also dont forget to print the line breaks
							;
							;
							;
 0000013E  EB 03					jmp  _endLoop

 00000140					_notPrime:
 00000140  41						INC  ECX						; increment ecx up 1 to reset the loop counter if their is no prime number
 00000141  EB 00					jmp  _endLoop
							
 00000143					_endLoop:
 00000143  40						INC  EAX						; increment eax to give the next prime candidate before the next loop iteration

 00000144  E2 D9				LOOP prime_candidate_loop

 00000146  C3				ret
 00000147			showPrimes ENDP

				; ---------------------------------------------------------------------------------
				; Name: isPrime
				;
				; This procedure takes the EAX and ECX register values from showPrimes procedure and uses them to create
				; an innerLoop that checks if the current iteration is a prime number. It then returns prime_bool to showPrimes.
				;
				; Preconditions: 
				;	-EAX and ECX must be given from showPrimes.
				;	-EAX and ECX must first be pushed to the stack in order to save their values for use later.
				;
				; Postconditions: EAX and ECX must be popped from the stack to retrieve the original values.
				;
				; Receives: EAX, ECX and prime_bool
				;
				; Returns: prime_bool (0 = not prime or 1 = prime)
				; ---------------------------------------------------------------------------------

 00000147			isPrime PROC
					; SAVE ON STACK ECX and EAX -------------------------------------------------------------
 00000147  51				push ECX								; ECX is loop count set to user_input
 00000148  50				push EAX								; EAX is the prime candidate, last in, first out!
					; ---------------------------------------------------------------------------------------
					
 00000149  8B C8			mov ECX, EAX							; make innerLoop count on ECX
 0000014B  83 E9 01			sub ECX, 1								; prep ecx to be one less than the prime candidate
					
 0000014E				innerLoop:
 0000014E  BA 00000000				mov EDX, 0							; clear EDX for div
 00000153  F7 F1				div ECX
 00000155  83 FA 00				cmp EDX, 0
 00000158  74 02				JE  _edxIsZero
 0000015A  75 24				JNE _endItteration					; not prime on this iteration

 0000015C					_edxIsZero:							;check ecx
 0000015C  83 F9 01					cmp ecx, 1
 0000015F  74 02					JE  _ecxIsOne
 00000161  7F 0C					jG  _ecxIsNotOne

 00000163					_ecxIsOne:							; this is a prime number
 00000163  C7 05 0000031F R				mov prime_bool, 1				; return bool (0 = not prime or 1 = prime)
	   00000001
 0000016D  EB 11					jmp _endItteration

 0000016F					_ecxIsNotOne:						; this is not a prime number
 0000016F  C7 05 0000031F R				mov prime_bool, 0				; return bool (0 = not prime or 1 = prime)
	   00000000
 00000179  B9 00000001					mov ECX, 1						; close loop with ecx change
 0000017E  EB 00					jmp _endItteration
							
 00000180					_endItteration:						; not prime on this iteration
 00000180  58						pop EAX							; reinitialize EAX from stack
 00000181  50						push EAX						; re-save EAX on the stack

 00000182  E2 CA			LOOP innerLoop

 00000184  58				pop EAX									; BRING BACK ORIGINAL EXC and EAX from Stack
 00000185  59				pop ECX

 00000186  C3				ret
 00000187			isPrime ENDP

				; ---------------------------------------------------------------------------------
				; Name: farewell
				;
				; This procedure prints a farewell prompt to the user.
				;
				; Preconditions: farewell_prompt must be defined in the data section.
				;
				; Postconditions: N/A
				;
				; Receives: farewell_prompt
				;
				; Returns: WriteString farewell_prompt
				; ---------------------------------------------------------------------------------

 00000187			farewell PROC
 00000187  E8 00000000 E		call CrLf
 0000018C  BA 00000327 R		mov  EDX, OFFSET farewell_prompt
 00000191  E8 00000000 E		call WriteString
 00000196  E8 00000000 E		call CrLf

 0000019B  C3				ret
 0000019C			farewell ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30139.0	    07/24/22 23:14:19
"Project Four     (Proj4_maesz.asm			     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000035C Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000019C Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
farewell . . . . . . . . . . . .	P Near	 00000187 _TEXT	Length= 00000015 Public STDCALL
getUserData  . . . . . . . . . .	P Near	 0000009E _TEXT	Length= 0000002D Public STDCALL
  _promptUser  . . . . . . . . .	L Near	 000000A8 _TEXT	
introduction . . . . . . . . . .	P Near	 0000001B _TEXT	Length= 00000083 Public STDCALL
isPrime  . . . . . . . . . . . .	P Near	 00000147 _TEXT	Length= 00000040 Public STDCALL
  innerLoop  . . . . . . . . . .	L Near	 0000014E _TEXT	
  _edxIsZero . . . . . . . . . .	L Near	 0000015C _TEXT	
  _ecxIsOne  . . . . . . . . . .	L Near	 00000163 _TEXT	
  _ecxIsNotOne . . . . . . . . .	L Near	 0000016F _TEXT	
  _endItteration . . . . . . . .	L Near	 00000180 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000001B Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
showPrimes . . . . . . . . . . .	P Near	 00000114 _TEXT	Length= 00000033 Public STDCALL
  prime_candidate_loop . . . . .	L Near	 0000011F _TEXT	
  _printPrime  . . . . . . . . .	L Near	 0000012F _TEXT	
  _notPrime  . . . . . . . . . .	L Near	 00000140 _TEXT	
  _endLoop . . . . . . . . . . .	L Near	 00000143 _TEXT	
validate . . . . . . . . . . . .	P Near	 000000CB _TEXT	Length= 00000049 Public STDCALL
  _notInRange  . . . . . . . . .	L Near	 000000D4 _TEXT	
  _lessThanOrEqualToUpper  . . .	L Near	 000000F3 _TEXT	
  _validNumber . . . . . . . . .	L Near	 000000FA _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LOWER_BOUND  . . . . . . . . . .	Number	 00000001h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
UPPER_BOUND  . . . . . . . . . .	Number	 000000C8h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
direction_1  . . . . . . . . . .	Byte	 00000043 _DATA	
direction_2  . . . . . . . . . .	Byte	 0000004F _DATA	
direction_3  . . . . . . . . . .	Byte	 000000B0 _DATA	
direction_4  . . . . . . . . . .	Byte	 0000010F _DATA	
direction_5  . . . . . . . . . .	Byte	 0000015E _DATA	
direction_6  . . . . . . . . . .	Byte	 000001D6 _DATA	
direction_7  . . . . . . . . . .	Byte	 00000250 _DATA	
error_1  . . . . . . . . . . . .	Byte	 000002CF _DATA	
error_2  . . . . . . . . . . . .	Byte	 000002D6 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
farewell_prompt  . . . . . . . .	Byte	 00000327 _DATA	
get_user_input_1 . . . . . . . .	Byte	 00000280 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro_1  . . . . . . . . . . . .	Byte	 00000000 _DATA	
is_valid_message . . . . . . . .	Byte	 00000309 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
prime_bool . . . . . . . . . . .	DWord	 0000031F _DATA	
prime_spaces . . . . . . . . . .	Byte	 00000323 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
user_input_check . . . . . . . .	DWord	 000002C7 _DATA	
user_input . . . . . . . . . . .	DWord	 000002CB _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
